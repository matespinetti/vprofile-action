name: vprofile actions
on: workflow_dispatch
env:
    AWS_REGION: us-east-2
    ECR_REPOSITORY: vprofileapp
    EKS_CLUSTER: vprofile-eks

jobs:
    Testing:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Java 11
              uses: actions/setup-java@v3
              with:
                  distribution: "temurin" # See 'Supported distributions' for available options
                  java-version: "11"

            - name: Run Maven tests
              run: mvn test

            - name: Run Checkstyle
              run: mvn checkstyle:checkstyle

            - name: Set up SonarQube scanner
              uses: warchant/setup-sonar-scanner@v7

            - name: Run SonarQube scan
              env:
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                  SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
                  SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
                  SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
                  AWS_REGION: us-east-2
                  ECR_REPOSITORY: vprofileapp
                  EKS_CLUSTER: vprofile-eks
              run: |
                  sonar-scanner \
                    -Dsonar.host.url=${SONAR_HOST_URL} \
                    -Dsonar.login=${SONAR_TOKEN} \
                    -Dsonar.organization=${SONAR_ORGANIZATION} \
                    -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                    -Dsonar.sources=src/ \
                    -Dsonar.junit.reportsPath=target/surefire-reports/ \
                    -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                    -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml \
                    -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/

            # - name: Check SonarQube Quality Gate
            #   id: sonarqube-quality-gate-check
            #   uses: sonarsource/sonarqube-quality-gate-action@master
            #   timeout-minutes: 10
            #   env:
            #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            #       SONAR_HOST_URL: ${{ secrets.SONAR_URL }} # Optional

    Build_AND_Publish:
        needs: Testing
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Buld & upload image to ECR
              uses: appleboy/docker-ecr-action@master
              with:
                  access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  registry: ${{ secrets.REGISTRY }}
                  repo: ${{ env.ECR_REPOSITORY}}
                  region: ${{ env.AWS_REGION}}
                  tags: latest, ${{ github.run_number}}
                  daemon_off: false
                  dockerfile: ./Dockerfile
                  context: ./

    DeployToEks:
        needs: Build_AND_Publish
        runs-on: ubuntu-latest
        steps:
            - name: Code checkout
              uses: actions/checkout@v4
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Get kubeconfig
              run: aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.EKS_CLUSTER }}

            - name: Login to ECR
              run: kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTRY }} --docker-username=AWS  --docker-password=$(aws ecr get-login-password)

            - name: Deploy Helm
              uses: bitovi/github-actions-deploy-eks-helm@v1.2.10
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}
                  cluster-name: ${{ env.EKS_CLUSTER }}

                  chart-path: helm/vprofilecharts
                  namespace: default
                  values: appimage= ${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }}, apptag=${{ github.run_number}}
                  name: vprofile-stack
